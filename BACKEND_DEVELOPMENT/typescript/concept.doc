Ques.1 - What advantage does typescript gives us?Explain with example?
Typescript is a superset of Javascript which adds optional static typing to the language. It allows developers to catch errors early in the development cycle, making it easier for them to fix issues.
It adds some extra features in js code
it will add data type in a variable, func, argument, parameters etc.

Ques.2 - What does typescript add to javascript?Explain each of them in your own words.
It will add data type in variable
we can use non-js features like interfaces or generics
It gives access to use modern tools and techniques we can used in our code.
By adding data type with variables ts compiler can check type of data during compile time which will tell if any error in our code before runtime

Ques.3 - Why do we need typescript compiler?
Ans - It will compile typescript code and also convert typescript to js code to run on browser.

Ques.4 - What happens when you compile?
Ans- When we compile typescript code and convert typescript to js code to run on browser using the typescript compiler, it checks for any errors in the code if there are no errors then
ts file is converted into js which will execute in the browser.


Ques.5 - What are the different types available in typescript?
Ans - number - 1, 5 , 2.5, -10
string - "hello", 'world', `hey`
boolean - true, false
object - {name, value}
array - [1, 2, 3]


Ques.6 - Why does add('1', '2') start showing error when the trainer has defined types?
Ans - as we define data type number to variable num1 and num2 so add function will only get number data type and we are giving string data type that's why it is giving error

Ques.7 - What do you mean typescript can infer the types? What is the advantage of this?
Ans - type inference is a feature of the typescript that allows compiler to deduce the type of the variable, argument and function call based on its context or type of data we provide to the variable.
type inference can save time and effort, as we don't have to explicitly define data type of the variable. 

Ques.8 - What is the problem with type inference sometime and how do you solve with type casting?
Ans - some time type inference doesn't deduce the type of the variable, argument and function call based on its context or data that we provide. In this case
we define data type of the variable, argument , expression explicitly which is known as typecasting.

Ques.9 - What does tsc init do?
Ans - It will create a typescript configuration file that contains all the configuration for compiling TypeScript files in which we modify or do some configuration  which will follow rules that we define in config file.

Ques.10 - What does strict mode do?
Ans - It will use strict mode by default if we not mention anything about it. Strict mode makes sure that all variables must be declared before they access.
It add some extra null checker which will ensure that nothing will add(like add events) to null values or don't use null values in other functions or expressions
In strict mode typescript does not check our html code by which some general features of html doesn't work.

Ques.11 - What does buttonElement ! exactly do ? Why do we put EXCLAMATION MARK( ! ).
Ans - buttonElement! refers to an element that definitely exists. TypeScript uses the exclamation mark (!) operator for null assertion. This means it tells TypeScript that the object cannot be null/undefined
The exclamation mark ( ! ) after a type definition means that the TypeScript Compiler should 
assume that the given type is always provided, even if it cannot verify that at compile-time
because the JavaScript code may be too complex for TypeScript to understand.
It will tell the typescript compiler that the variable we use is not null.

Ques.12 - Why should not we use any type?
Because any type means that the variable can hold any type of data., using any type tells TypeScript that we want to ignore all type checking for that particular variable. This defeats one of the main reasons why people choose to use TypeScript: to catch errors

Ques.13 - How we handle objects?
We can create an interface or class to represent object structure.
Ques.14 - How do we handle arrays?
Ques.1 - What does type keyword do?
Ques.15 - Interface are more frequently used than types. What do you think is the advantage of interfaces?
Ques.16 - How is an array a generic as per the trainer?
Ques.17 - Why do we need to change the target to es6?
Ques.18 - How does generics work with promises.
Ques.19- Why do we need to install types/node? What does it do?
Ques.20- Why do we need to install types/express? What does it do?
Ques.21- What is the need for changing moduleresolution to es6?
Ques.22- Import keyword is very similar to require keyword. What do you think?
Ques.23- How to use import keyword?
Ques.24- How does import { Router } from 'express'. work. What does { } this do?
Ques.25- What do you mean by interface?Why do we have to create it for todos type?
Ques.26- What are named exports and default exports?
Ques.27- What is type casting
Ques.28- What is the need of RequestBody and RequestParams?
Ques.29- Why do we have to change the rootDir to './src'?
Ques.30- Why do we add node dist/app.js in package.json ? What does it exactly do?

System Design Questions
Ques.31- What is vertical Scaling and Horizontal Scaling.
Ques.32- Which one would you prefer and why?
Ques.33- What are the antipatterns you should avoid with Database?Why is it so?
Ques.34- What is the solution to the antipattern?
Ques.35- What is Microservice architecture
Ques.36- What is Monolitth Architecture?
Ques.37- What is the difference between Microservice and Monolith architecture 